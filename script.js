// –ë–∞–∑–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
const materials = {
    beginner: [
        { 
            title: "–û—Å–Ω–æ–≤—ã –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∏", 
            type: "üìö –°—Ç–∞—Ç—å—è", 
            link: "https://ru.khanacademy.org/math/cc-1st-grade-math",
            points: 10,
            tags: ["–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–Ω–∞—á–∞–ª—å–Ω—ã–π"]
        },
        { 
            title: "HTML –∏ CSS –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö", 
            type: "üé• –í–∏–¥–µ–æ–∫—É—Ä—Å", 
            link: "https://youtu.be/DOEtVdkKwcU",
            points: 15,
            tags: ["–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–≤–µ–±"]
        },
        { 
            title: "–§–∏–∑–∏–∫–∞: –º–µ—Ö–∞–Ω–∏–∫–∞", 
            type: "üìñ –£—á–µ–±–Ω–∏–∫", 
            link: "https://physbook.ru/index.php/–°.–í._–ì—Ä–æ–º–æ–≤,_–ù.–ê._–†–æ–¥–∏–Ω–∞_–§–∏–∑–∏–∫–∞_7",
            points: 20,
            tags: ["—Ñ–∏–∑–∏–∫–∞", "–Ω–∞—É–∫–∞"]
        },
        { 
            title: "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π: –±–∞–∑–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã", 
            type: "üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", 
            link: "https://www.duolingo.com",
            points: 10,
            tags: ["—è–∑—ã–∫–∏", "–Ω–∞—á–∞–ª—å–Ω—ã–π"]
        },
        { 
            title: "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç", 
            type: "üìä –ò–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∞", 
            link: "https://habr.com/ru/post/310460/",
            points: 15,
            tags: ["—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"]
        }
    ],
    intermediate: [
        { 
            title: "–ê–ª–≥–µ–±—Ä–∞: —É—Ä–∞–≤–Ω–µ–Ω–∏—è", 
            type: "üìö –£—á–µ–±–Ω–∏–∫", 
            link: "https://ru.khanacademy.org/math/algebra",
            points: 20,
            tags: ["–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞"]
        },
        { 
            title: "Python: —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∫–ª–∞—Å—Å—ã", 
            type: "üé• –í–∏–¥–µ–æ", 
            link: "https://youtu.be/Ej_02ICOIgs",
            points: 25,
            tags: ["–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"]
        },
        { 
            title: "–•–∏–º–∏—è: –æ—Å–Ω–æ–≤—ã", 
            type: "üìñ –ö—É—Ä—Å", 
            link: "https://stepik.org/course/551/promo",
            points: 20,
            tags: ["–Ω–∞—É–∫–∞"]
        },
        { 
            title: "–ö–∞–∫ –ø–∏—Å–∞—Ç—å —ç—Å—Å–µ", 
            type: "üìÑ –ì–∞–π–¥", 
            link: "https://4brain.ru/writing/",
            points: 15,
            tags: ["–ø–∏—Å—å–º–æ"]
        },
        { 
            title: "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö", 
            type: "üõ† –ü—Ä–∞–∫—Ç–∏–∫—É–º", 
            link: "https://alexgyver.ru/lessons/",
            points: 30,
            tags: ["—Ç–µ—Ö–Ω–∏–∫–∞"]
        }
    ],
    advanced: [
        { 
            title: "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑", 
            type: "üìö –ö—É—Ä—Å MIT", 
            link: "https://ocw.mit.edu/courses/mathematics/18-01sc-single-variable-calculus-fall-2010/",
            points: 40,
            tags: ["–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞"]
        },
        { 
            title: "–ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏", 
            type: "üé• –õ–µ–∫—Ü–∏—è", 
            link: "https://youtu.be/aircAruvnKk",
            points: 50,
            tags: ["–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"]
        },
        { 
            title: "–ö–≤–∞–Ω—Ç–æ–≤–∞—è —Ñ–∏–∑–∏–∫–∞", 
            type: "üìñ –ö–Ω–∏–≥–∞", 
            link: "https://arxiv.org/abs/quant-ph/0508125",
            points: 45,
            tags: ["–Ω–∞—É–∫–∞"]
        },
        { 
            title: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π Python", 
            type: "üíª –ü—Ä–∞–∫—Ç–∏–∫–∞", 
            link: "https://realpython.com/",
            points: 35,
            tags: ["–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"]
        },
        { 
            title: "–ê—Å—Ç—Ä–æ—Ñ–∏–∑–∏–∫–∞ –∑–∞ —á–∞—Å", 
            type: "üéß –ü–æ–¥–∫–∞—Å—Ç", 
            link: "https://www.youtube.com/watch?v=un2nD7vQqY8",
            points: 30,
            tags: ["–Ω–∞—É–∫–∞", "–∫–æ—Å–º–æ—Å"]
        }
    ]
};

// –¢–µ—Å—Ç—ã
const tests = {
    beginner: [
        {
            question: "–ß–µ–º—É —Ä–∞–≤–Ω–æ 5 √ó 7?",
            options: ["25", "35", "42", "30"],
            answer: 1,
            explanation: "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: 35 (5 √ó 7 = 35)"
        },
        {
            question: "–ö–∞–∫–æ–π —Ç–µ–≥ HTML –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏?",
            options: ["<link>", "<a>", "<href>", "<url>"],
            answer: 1,
            explanation: "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <a> (anchor)"
        },
        {
            question: "–ß—Ç–æ –∏–∑–º–µ—Ä—è–µ—Ç—Å—è –≤ –≤–∞—Ç—Ç–∞—Ö?",
            options: ["–°–∏–ª–∞ —Ç–æ–∫–∞", "–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ", "–ú–æ—â–Ω–æ—Å—Ç—å", "–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ"],
            answer: 2,
            explanation: "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –ú–æ—â–Ω–æ—Å—Ç—å"
        }
    ],
    intermediate: [
        {
            question: "–†–µ—à–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: 2x + 5 = 15",
            options: ["x = 5", "x = 7.5", "x = 10", "x = 12"],
            answer: 0,
            explanation: "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: x = 5 (2*5 + 5 = 15)"
        },
        {
            question: "–ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç –∫–æ–¥: print('Hello'[::-1])?",
            options: ["Hello", "olleH", "Error", "H"],
            answer: 1,
            explanation: "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: olleH (—Ä–∞–∑–≤–æ—Ä–æ—Ç —Å—Ç—Ä–æ–∫–∏)"
        },
        {
            question: "–§–æ—Ä–º—É–ª–∞ –≤–æ–¥—ã:",
            options: ["HO", "H2O", "H2O2", "H3O"],
            answer: 1,
            explanation: "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: H‚ÇÇO"
        }
    ],
    advanced: [
        {
            question: "–ß–µ–º—É —Ä–∞–≤–µ–Ω ‚à´(x¬≤)dx –æ—Ç 0 –¥–æ 3?",
            options: ["6", "9", "12", "27"],
            answer: 1,
            explanation: "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: 9 (‚à´x¬≤dx = x¬≥/3 ‚Üí 27/3 = 9)"
        },
        {
            question: "–ß—Ç–æ —Ç–∞–∫–æ–µ backpropagation –≤ –Ω–µ–π—Ä–æ—Å–µ—Ç—è—Ö?",
            options: [
                "–ú–µ—Ç–æ–¥ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏",
                "–ê–ª–≥–æ—Ä–∏—Ç–º –æ–±—É—á–µ–Ω–∏—è",
                "–¢–∏–ø –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã",
                "–§—É–Ω–∫—Ü–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏"
            ],
            answer: 1,
            explanation: "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –ê–ª–≥–æ—Ä–∏—Ç–º –æ–±—É—á–µ–Ω–∏—è (–º–µ—Ç–æ–¥ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –æ—à–∏–±–∫–∏)"
        },
        {
            question: "–ö–∞–∫–æ–π –ø—Ä–∏–Ω—Ü–∏–ø –æ–ø–∏—Å—ã–≤–∞–µ—Ç —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –®—Ä—ë–¥–∏–Ω–≥–µ—Ä–∞?",
            options: [
                "–ö–≤–∞–Ω—Ç–æ–≤–∞—è —Å—É–ø–µ—Ä–ø–æ–∑–∏—Ü–∏—è",
                "–¢–µ–æ—Ä–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
                "–¢–µ—Ä–º–æ–¥–∏–Ω–∞–º–∏–∫–∞",
                "–≠–ª–µ–∫—Ç—Ä–æ–º–∞–≥–Ω–µ—Ç–∏–∑–º"
            ],
            answer: 0,
            explanation: "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –ö–≤–∞–Ω—Ç–æ–≤–∞—è —Å—É–ø–µ—Ä–ø–æ–∑–∏—Ü–∏—è"
        }
    ]
};

// –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
const achievements = {
    first_step: {
        title: "–ü–µ—Ä–≤—ã–π —à–∞–≥",
        desc: "–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–µ—Ä–≤–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞",
        earned: false
    },
    test_master: {
        title: "–ú–∞—Å—Ç–µ—Ä —Ç–µ—Å—Ç–æ–≤",
        desc: "–ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞",
        earned: false
    },
    material_explorer: {
        title: "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å",
        desc: "–ò–∑—É—á–∏—Ç—å 5 –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤",
        earned: false
    },
    bookworm: {
        title: "–ö–Ω–∏–∂–Ω—ã–π —á–µ—Ä–≤—å",
        desc: "–ü—Ä–æ—á–∏—Ç–∞—Ç—å 10 –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤",
        earned: false
    },
    genius: {
        title: "–ì–µ–Ω–∏–π",
        desc: "–ù–∞–±—Ä–∞—Ç—å 200 –æ—á–∫–æ–≤",
        earned: false
    }
};

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let state = {
    points: 0,
    materialsViewed: 0,
    currentLevel: 'beginner',
    darkMode: false
};

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const materialsContainer = document.getElementById('materials');
const progressBar = document.getElementById('progress-bar');
const progressText = document.getElementById('progress-text');
const pointsElement = document.getElementById('points');
const achievementsElement = document.getElementById('achievements');
const achievementPopup = document.getElementById('achievements-popup');
const achievementTitle = document.getElementById('achievement-title');
const achievementDesc = document.getElementById('achievement-desc');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
function init() {
    loadState();
    renderMaterials(state.currentLevel);
    setupEventListeners();
    updateUI();
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ localStorage
function loadState() {
    const savedState = localStorage.getItem('appState');
    if (savedState) {
        state = JSON.parse(savedState);
        if (state.darkMode) {
            document.body.classList.add('dark-mode');
        }
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ localStorage
function saveState() {
    localStorage.setItem('appState', JSON.stringify(state));
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function updateUI() {
    progressBar.style.width = `${calculateProgress()}%`;
    progressText.textContent = `${calculateProgress()}% –∏–∑—É—á–µ–Ω–æ`;
    pointsElement.textContent = state.points;
    
    const earnedAchievements = Object.values(achievements).filter(a => a.earned).length;
    achievementsElement.textContent = `${earnedAchievements}/5`;
}

// –†–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function calculateProgress() {
    const totalMaterials = Object.values(materials).reduce((acc, level) => acc + level.length, 0);
    return Math.min(Math.floor((state.materialsViewed / totalMaterials) * 100), 100);
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
function renderMaterials(level) {
    materialsContainer.innerHTML = '';
    state.currentLevel = level;
    
    materials[level].forEach(material => {
        const card = document.createElement('div');
        card.className = 'material-card';
        card.innerHTML = `
            <h3>${material.title}</h3>
            <p>${material.type}</p>
            <a href="${material.link}" target="_blank">–û—Ç–∫—Ä—ã—Ç—å</a>
            <span class="material-points">${material.points} –æ—á–∫–æ–≤</span>
        `;
        
        card.addEventListener('click', () => {
            addPoints(material.points);
            trackMaterialViewed();
            checkAchievement('first_step');
            if (state.materialsViewed >= 5) checkAchievement('material_explorer');
            if (state.materialsViewed >= 10) checkAchievement('bookworm');
            if (state.points >= 200) checkAchievement('genius');
        });
        
        materialsContainer.appendChild(card);
    });
    
    saveState();
    updateUI();
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
function renderTest(level) {
    materialsContainer.innerHTML = '';
    const test = tests[level];
    
    let html = `
        <div class="test-card">
            <h2>–¢–µ—Å—Ç: ${level.toUpperCase()}</h2>
            <div class="test-progress">–í–æ–ø—Ä–æ—Å 1 –∏–∑ ${test.length}</div>
    `;
    
    test.forEach((question, index) => {
        html += `
            <div class="question" id="q${index}" ${index > 0 ? 'style="display:none"' : ''}>
                <p>${index + 1}. ${question.question}</p>
                ${question.options.map((option, i) => `
                    <label class="test-option">
                        <input type="radio" name="q${index}" value="${i}">
                        ${option}
                    </label>
                `).join('')}
                ${index === test.length - 1 ? 
                    '<button id="submit-test">–ó–∞–≤–µ—Ä—à–∏—Ç—å</button>' : 
                    '<button class="next-question">–î–∞–ª–µ–µ</button>'}
                <div class="explanation hidden"></div>
            </div>
        `;
    });
    
    html += `</div>`;
    materialsContainer.innerHTML = html;

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∞
    let currentQuestion = 0;
    const questions = document.querySelectorAll('.question');
    const nextButtons = document.querySelectorAll('.next-question');
    
    nextButtons.forEach(btn => {
        btn.addEventListener('click', () => {
            questions[currentQuestion].style.display = 'none';
            currentQuestion++;
            questions[currentQuestion].style.display = 'block';
            document.querySelector('.test-progress').textContent = 
                `–í–æ–ø—Ä–æ—Å ${currentQuestion + 1} –∏–∑ ${test.length}`;
        });
    });
    
    document.getElementById('submit-test')?.addEventListener('click', () => {
        checkTestAnswers(level);
    });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ —Ç–µ—Å—Ç–∞
function checkTestAnswers(level) {
    const test = tests[level];
    let score = 0;
    let resultsHtml = '<div class="test-results"><h3>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞</h3>';
    
    test.forEach((q, i) => {
        const selected = document.querySelector(`input[name="q${i}"]:checked`);
        const isCorrect = selected && parseInt(selected.value) === q.answer;
        if (isCorrect) score++;
        
        resultsHtml += `
            <div class="question-result ${isCorrect ? 'correct' : 'wrong'}">
                <p><strong>–í–æ–ø—Ä–æ—Å ${i + 1}:</strong> ${q.question}</p>
                <p>–í–∞—à –æ—Ç–≤–µ—Ç: ${selected ? q.options[selected.value] : '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'}</p>
                <p class="explanation">${q.explanation}</p>
            </div>
        `;
    });
    
    resultsHtml += `
        <p class="score">–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ ${score} –∏–∑ ${test.length}</p>
        <button id="back-to-materials">–ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º</button>
        </div>
    `;
    
    materialsContainer.innerHTML = resultsHtml;
    
    document.getElementById('back-to-materials').addEventListener('click', () => {
        renderMaterials(level);
    });
    
    if (score === test.length) {
        addPoints(50);
        checkAchievement('test_master');
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤
function addPoints(amount) {
    state.points += amount;
    saveState();
    updateUI();
}

// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
function trackMaterialViewed() {
    state.materialsViewed++;
    saveState();
    updateUI();
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function checkAchievement(achievementId) {
    if (!achievements[achievementId].earned) {
        achievements[achievementId].earned = true;
        showAchievementPopup(achievements[achievementId]);
        saveState();
        updateUI();
    }
}

// –ü–æ–∫–∞–∑ –ø–æ–ø–∞–ø–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
function showAchievementPopup(achievement) {
    achievementTitle.textContent = achievement.title;
    achievementDesc.textContent = achievement.desc;
    achievementPopup.classList.remove('hidden');
    achievementPopup.classList.add('show');
    
    setTimeout(() => {
        achievementPopup.classList.remove('show');
        setTimeout(() => achievementPopup.classList.add('hidden'), 300);
    }, 3000);
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
function toggleDarkMode() {
    state.darkMode = !state.darkMode;
    document.body.classList.toggle('dark-mode');
    saveState();
}

// –ü–æ–∏—Å–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
function setupSearch() {
    const searchInput = document.getElementById('search-input');
    searchInput.addEventListener('input', (e) => {
        const searchTerm = e.target.value.toLowerCase();
        const cards = document.querySelectorAll('.material-card');
        
        cards.forEach(card => {
            const title = card.querySelector('h3').textContent.toLowerCase();
            card.style.display = title.includes(searchTerm) ? 'block' : 'none';
        });
    });
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –ö–Ω–æ–ø–∫–∏ —É—Ä–æ–≤–Ω–µ–π
    document.getElementById('beginner').addEventListener('click', () => renderMaterials('beginner'));
    document.getElementById('intermediate').addEventListener('click', () => renderMaterials('intermediate'));
    document.getElementById('advanced').addEventListener('click', () => renderMaterials('advanced'));
    
    // –ö–Ω–æ–ø–∫–∞ —Ç–µ—Å—Ç–∞
    document.getElementById('test-btn').addEventListener('click', () => renderTest(state.currentLevel));
    
    // –ö–Ω–æ–ø–∫–∞ —Ç–µ–º—ã
    document.getElementById('theme-toggle').addEventListener('click', toggleDarkMode);
    
    // –ü–æ–∏—Å–∫
    setupSearch();
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', init);